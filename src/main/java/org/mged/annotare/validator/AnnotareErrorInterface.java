/**
* The contents of this file are subject to the MIT License
* (the "License");  you may not use this file except in
*  compliance with the License.  You may obtain a copy of the License  at
* http://www.opensource.org/licenses/mit-license.php 
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
* the specific language governing rights and limitations under the License.
*
* Authors are listed at http://code.google.com/p/annotare/people/list
*
* @author Joseph White; Dana-Farber Cancer Institute, Boston MA, USA
* @date 16-Jun-2010
* 
*/
package org.mged.annotare.validator;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import org.mged.magetab.error.ErrorItem;

public interface AnnotareErrorInterface {

	/**
	 * Adds an ErrorItem object to the validationErrors list
	 * The object is obtained from the parser via a listener callback
	 */
	public void addErrorItem (ErrorItem item);
	
	/**
	 * parseAnnotareData
	 * create a list of ErrorItem objects based on objects supplied by the main Annotare application
	 * Input: report object
	 * @return: ArrayList of ErrorItem having itemNum appropriately generated by ErrorItem
	 * Note: can change type of report once we know the type of Annotare objects supplied to the method or cast
	 */
	public ArrayList<ErrorItem> parseAnnotareData (Object report);
	
	/**
	 * removeError
	 * overloaded to remove item based on index or the object itself
	 * @param errIndex: validationErrors index
	 * @param e: error object
	 * @return true if removed
	 */
	public boolean removeError(int errIndex) ;
	
	public boolean removeError(ErrorItem e) ;
	
	/**
	 * getItem: returns specific error object based on unique identifier
	 * 
	 * @param key: int representing the item id
	 * var. index: index into the validationErrors Vector
	 * @return: ErrorItem object
	 */
	public ErrorItem getItem (int key) ;

	/**
	 * getErrorType
	 * 
	 * Note: this will likely be an expensive method to run, so 
	 * it should not be run frequently.
	 * 
	 * @param errNum
	 * @return ArrayList of ErrorItem containing all instances of errNum 
	 */
	public ArrayList<ErrorItem> getErrorsByType(int errCode) ;
	
	public ArrayList<ErrorItem> getErrorList () ;
	
	public int countErrors () ;
	
}
